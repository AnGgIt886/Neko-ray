name: Build and Release

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag name for release (leave empty for artifacts)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  ANDROID_SDK_VERSION: '36'
  BUILD_TOOLS_VERSION: '36.0.0'
  NDK_VERSION: '28.2.13676358'
  CMDLINE_TOOLS_VERSION: '12266719'

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      ndk-home: ${{ steps.setup-ndk.outputs.ndk-home }}
      current-tag: ${{ steps.fetch-xray-tag.outputs.current-tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          log-accepted-android-sdk-licenses: false
          cmdline-tools-version: ${{ env.CMDLINE_TOOLS_VERSION }}
          packages: 'platforms;android-${{ env.ANDROID_SDK_VERSION }} build-tools;${{ env.BUILD_TOOLS_VERSION }} platform-tools'

      - name: Install NDK
        id: setup-ndk
        run: |
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            --channel=0 \
            --install "ndk;${{ env.NDK_VERSION }}"
          NDK_PATH="$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}"
          echo "NDK_HOME=$NDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$NDK_PATH" >> $GITHUB_ENV
          echo "ndk-home=$NDK_PATH" >> $GITHUB_OUTPUT

      - name: Fetch AndroidLibXrayLite tag
        id: fetch-xray-tag
        run: |
          pushd AndroidLibXrayLite
          CURRENT_TAG=$(git describe --tags --abbrev=0)
          echo "Current tag: $CURRENT_TAG"
          echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_ENV
          echo "current-tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          popd

  build-dependencies:
    needs: setup-environment
    runs-on: ubuntu-latest
    env:
      NDK_HOME: ${{ needs.setup-environment.outputs.ndk-home }}
      ANDROID_NDK_HOME: ${{ needs.setup-environment.outputs.ndk-home }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Restore cached libtun2socks
        id: cache-libtun2socks
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/libs
          key: libtun2socks-${{ runner.os }}-${{ needs.setup-environment.outputs.ndk-home }}-${{ hashFiles('.git/modules/hev-socks5-tunnel/HEAD') }}-${{ hashFiles('.git/modules/badvpn/HEAD') }}-${{ hashFiles('.git/modules/libancillary/HEAD') }}

      - name: Build libtun2socks
        if: steps.cache-libtun2socks.outputs.cache-hit != 'true'
        run: |
          bash compile-tun2socks.sh

      - name: Save libtun2socks cache
        if: steps.cache-libtun2socks.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/libs
          key: ${{ steps.cache-libtun2socks.outputs.cache-primary-key }}

      - name: Download libv2ray
        uses: robinraju/release-downloader@v1
        with:
          repository: '2dust/AndroidLibXrayLite'
          tag: ${{ needs.setup-environment.outputs.current-tag }}
          fileName: 'libv2ray.aar'
          out-file-path: V2rayNG/app/libs/

      - name: Restore cached libhysteria2
        id: cache-libhysteria2
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/hysteria/libs
          key: libhysteria2-${{ runner.os }}-${{ needs.setup-environment.outputs.ndk-home }}-${{ hashFiles('.git/modules/hysteria/HEAD') }}-${{ hashFiles('libhysteria2.sh') }}

      - name: Setup Golang
        if: steps.cache-libhysteria2.outputs.cache-hit != 'true'
        uses: actions/setup-go@v6
        with:
          go-version-file: 'AndroidLibXrayLite/go.mod'
          cache: true

      - name: Build libhysteria2
        if: steps.cache-libhysteria2.outputs.cache-hit != 'true'
        run: |
          bash libhysteria2.sh

      - name: Save libhysteria2 cache
        if: steps.cache-libhysteria2.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/hysteria/libs
          key: ${{ steps.cache-libhysteria2.outputs.cache-primary-key }}

      - name: Upload dependencies as artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-dependencies
          path: |
            ${{ github.workspace }}/libs
            ${{ github.workspace }}/hysteria/libs
            ${{ github.workspace }}/V2rayNG/app/libs/libv2ray.aar
          retention-days: 1

  build-apk:
    needs: [setup-environment, build-dependencies]
    runs-on: ubuntu-latest
    env:
      NDK_HOME: ${{ needs.setup-environment.outputs.ndk-home }}
      ANDROID_NDK_HOME: ${{ needs.setup-environment.outputs.ndk-home }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Verify NDK
        run: |
          echo "NDK_HOME: $NDK_HOME"
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
          ls -la $NDK_HOME || echo "NDK not found"
          sed -i '18i\
          \
              ndkVersion = "${{ env.NDK_VERSION }}"' ${{ github.workspace }}/V2rayNG/app/build.gradle.kts

      - name: Download dependencies artifact
        uses: actions/download-artifact@v5
        with:
          name: built-dependencies
          path: ${{ github.workspace }}

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Copy libtun2socks
        run: |
          cp -r ${{ github.workspace }}/libs ${{ github.workspace }}/V2rayNG/app

      - name: Copy libhysteria2
        run: |
          cp -r ${{ github.workspace }}/hysteria/libs ${{ github.workspace }}/V2rayNG/app

      - name: Build APK
        run: |
          cd ${{ github.workspace }}/V2rayNG
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          chmod +x gradlew
          chmod +x build.sh
          ./build.sh assembleRelease --no-timestamp || exit 1

      - name: Upload APK artifacts
        if: github.event.inputs.release_tag == ''
        uses: actions/upload-artifact@v4
        with:
          name: arm64-v8a
          path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*arm64-v8a.apk
          retention-days: 7

      - name: Upload APK artifacts
        if: github.event.inputs.release_tag == ''
        uses: actions/upload-artifact@v4
        with:
          name: armeabi-v7a
          path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*armeabi-v7a.apk
          retention-days: 7

      - name: Upload APK artifacts
        if: github.event.inputs.release_tag == ''
        uses: actions/upload-artifact@v4
        with:
          name: x86
          path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*x86.apk
          retention-days: 7

      - name: Upload APK artifacts
        if: github.event.inputs.release_tag == ''
        uses: actions/upload-artifact@v4
        with:
          name: x86_64
          path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*x86_64.apk
          retention-days: 7

      - name: Upload APK artifacts
        if: github.event.inputs.release_tag == ''
        uses: actions/upload-artifact@v4
        with:
          name: universal
          path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*universal.apk
          retention-days: 7

      - name: Prepare release assets
        if: github.event.inputs.release_tag != ''
        run: |
          mkdir -p ${{ github.workspace }}/release-assets
          cp ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*.apk ${{ github.workspace }}/release-assets/
          echo "APK_PATHS=$(ls ${{ github.workspace }}/release-assets/*.apk | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Prepare and upload release assets
        if: github.event.inputs.release_tag != ''
        uses: actions/upload-artifact@v4
        with:
          name: built-apks
          path: |
            ${{ github.workspace }}/release-assets/*arm64-v8a.apk
            ${{ github.workspace }}/release-assets/*armeabi-v7a.apk
            ${{ github.workspace }}/release-assets/*x86.apk
            ${{ github.workspace }}/release-assets/*x86_64.apk
            ${{ github.workspace }}/release-assets/*universal.apk
          retention-days: 1

      - name: Clean up build files
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/libs
          rm -rf ${{ github.workspace }}/hysteria/libs

  create-release:
    needs: build-apk
    if: github.event.inputs.release_tag != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download APK artifacts
        uses: actions/download-artifact@v5
        with:
          name: built-apks
          path: ${{ github.workspace }}/release-assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          repository: MRT-project/Neko-ray
          token: ${{ secrets.MY_TOKEN }}
          tag_name: ${{ github.event.inputs.release_tag }}
          name: Release ${{ github.event.inputs.release_tag }}
          body: |
            Automatic build release
            - Build date: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
          draft: false
          prerelease: false
          make_latest: true
          files: |
            ${{ github.workspace }}/release-assets/*.apk
