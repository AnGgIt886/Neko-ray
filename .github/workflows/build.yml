name: Build APK TEST

on:
  push:
  workflow_dispatch:
    branches:
      - dev
    inputs:
      XRAY_CORE_VERSION:
        description: 'Xray core version or commit hash'
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Golang
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.4'
        cache: false

    - name: Install gomobile
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Setup Android environment
      uses: android-actions/setup-android@v3

    - name: Gradle Wrapper validation
      uses: gradle/wrapper-validation-action@v2

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: 8.6
        build-root-directory: systems/commons
        cache-disabled: false
        cache-read-only: false
        cache-write-only: false
        cache-overwrite-existing: false
        gradle-home-cache-includes: caches notifications

        gradle-home-cache-cleanup: false
        add-job-summary: always
        add-job-summary-as-pr-comment: never
        dependency-graph: disabled
        dependency-graph-continue-on-failure: true
        build-scan-publish: false
        generate-job-summary: true
        gradle-home-cache-strict-match: false
        workflow-job-context: null

    - name: Setup matchers
      run: |
        # Setting up matchers...

        matchers_dir='${{ github.workspace }}/.github/matchers'
        matcher_list()
        {
          echo 'gradle-build-matcher.json'
          echo 'gradle-build-kotlin-error-matcher.json'
        }

        matcher_list | while IFS='' read -r NAME; do
          if test -f "${matchers_dir:?}/${NAME:?}"; then
            echo "::add-matcher::${matchers_dir:?}/${NAME:?}"
            echo "Matcher configured: ${NAME:?}"
          fi
        done

    - name: Build dependencies
      run: |
        mkdir ${{ github.workspace }}/build
        cd ${{ github.workspace }}/build
        git clone --depth=1 -b main https://github.com/2dust/AndroidLibXrayLite.git
        cd AndroidLibXrayLite
        go get github.com/xtls/xray-core@${{ github.event.inputs.XRAY_CORE_VERSION }} || true
        gomobile init
        go mod tidy -v
        gomobile bind -v -androidapi 27 -ldflags='-s -w' ./
        cp *.aar ${{ github.workspace }}/V2rayNG/app/libs/

    - name: Build project
      run: |
        cd ${{ github.workspace }}/V2rayNG
        chmod 777 *
        sed -i 's/org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8/org.gradle.jvmargs=-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8/' ${{ github.workspace }}/V2rayNG/gradle.properties
        ./gradlew --no-daemon build

    - name: Build APK RELEASE
      run: |
        cd ${{ github.workspace }}/V2rayNG
        chmod 777 *
        sed -i 's/org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8/org.gradle.jvmargs=-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8/' ${{ github.workspace }}/V2rayNG/gradle.properties
        ./gradlew assembleRelease

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: all
        path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*all.apk

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: arm64
        path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*arm64-v8a.apk

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: armeabi
        path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*armeabi.apk

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: armeabi-v7a
        path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*armeabi-v7a.apk

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: mips
        path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*mips.apk

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: mips64
        path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*mips64.apk

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: riscv64
        path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*riscv64.apk

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: x86
        path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*x86.apk

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: x86_64
        path: ${{ github.workspace }}/V2rayNG/app/build/outputs/apk/release/*x86_64.apk
